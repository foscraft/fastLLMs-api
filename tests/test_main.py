# Generated by CodiumAI

import pytest


class TestCodeUnderTest:
    # API endpoint returns expected response when given a valid query
    @pytest.mark.asyncio
    async def test_valid_query(self):
        # Arrange
        data = {"query": "What is the capital of France?"}

        # Act
        response = await self.client.post("/api/v1/ask", json=data)
        result = response.json()

        # Assert
        assert response.status_code == 200
        assert "answer" in result
        assert "documents" in result
        assert "query_time" in result

    # API endpoint returns expected response when given a valid query and HIDE_SOURCE is True
    @pytest.mark.asyncio
    async def test_valid_query_hide_source(self):
        # Arrange
        data = {"query": "What is the capital of France?"}

        # Act
        response = await self.client.post("/api/v1/ask", json=data)
        result = response.json()

        # Assert
        assert response.status_code == 200
        assert "answer" in result
        assert "documents" not in result
        assert "query_time" in result

    # API endpoint returns expected response when given a valid query and model_type is GPT4All
    @pytest.mark.asyncio
    async def test_valid_query_gpt4all(self):
        # Arrange
        data = {"query": "What is the capital of France?"}

        # Act
        response = await self.client.post("/api/v1/ask", json=data)
        result = response.json()

        # Assert
        assert response.status_code == 200
        assert "answer" in result
        assert "documents" in result
        assert "query_time" in result

    # API endpoint raises HTTPException when query is not provided
    @pytest.mark.asyncio
    async def test_missing_query(self):
        # Arrange
        data = {}

        # Act
        response = await self.client.post("/api/v1/ask", json=data)

        # Assert
        assert response.status_code == 400

    # API endpoint returns expected response when given an empty query
    @pytest.mark.asyncio
    async def test_empty_query(self):
        # Arrange
        data = {"query": ""}

        # Act
        response = await self.client.post("/api/v1/ask", json=data)
        result = response.json()

        # Assert
        assert response.status_code == 200
        assert "answer" in result
        assert "documents" in result
        assert "query_time" in result
